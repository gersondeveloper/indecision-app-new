{"version":3,"sources":["components/AddOption.js","components/Header.js","components/Option.js","components/Options.js","components/Action.js","components/OptionModal.js","components/IndecisionApp.js","App.js","serviceWorker.js","index.js"],"names":["AddOption","state","error","undefined","handleAddOption","e","preventDefault","option","target","elements","value","trim","props","setState","this","className","onSubmit","type","name","React","Component","Header","title","subtitle","defaultProps","Option","count","optionText","onClick","handleDeleteOption","Options","handleDeleteOptions","options","length","map","index","key","Action","disabled","hasOptions","handlePick","OptionModal","isOpen","selectedOption","contentLabel","onRequestClose","handleClearSelectedOption","closeTimeoutMS","clearSelectedOption","IndecisionApp","optionToRemove","prevState","filter","randomNum","Math","floor","random","indexOf","concat","console","log","json","localStorage","getItem","JSON","parse","prevProps","stringify","setItem","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4956d40.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass AddOption extends React.Component {\r\n  \r\n//#region constructor\r\n  state = {\r\n    error: undefined\r\n  }\r\n//#endregion\r\n\r\n  handleAddOption = (e) => {\r\n    e.preventDefault()\r\n\r\n    const option = e.target.elements.option.value.trim()\r\n    const error = this.props.handleAddOption(option)\r\n\r\n    this.setState(() => ({ error: error }))\r\n\r\n    if (!error) {\r\n      e.target.elements.option.value = ''\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        {this.state.error && <p className = 'add-option-error'>{this.state.error}</p>}\r\n        <form className = 'add-option' onSubmit={this.handleAddOption}>\r\n          <input className = 'add-option__input' type=\"text\" name=\"option\" />\r\n          <button className = 'button'>Add Option</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddOption\r\n","import React from 'react'\r\n\r\nconst Header = (props) => (\r\n    <div className='header'>\r\n        <div className='container'>\r\n            <h1 className='header__title'>{props.title}</h1>\r\n            {props.subtitle && <h2 className='header__subtitle'>{props.subtitle}</h2>}\r\n        </div>\r\n    </div>\r\n)\r\n\r\nHeader.defaultProps = {\r\n    title: 'Indecision App'\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nconst Option = (props) => (\r\n  <div className = 'option'>\r\n    <p className = 'option__text'>{props.count}. {props.optionText}</p>\r\n    <button\r\n      className = 'button button--link'\r\n      onClick = {(e) => {\r\n        props.handleDeleteOption(props.optionText)\r\n      }}>remove</button>\r\n  </div>\r\n)\r\n\r\nexport default Option\r\n","import React from 'react'\r\nimport Option from './Option'\r\n\r\nconst Options = (props) => (\r\n  <div>\r\n    <div className = 'widget-header'>\r\n      <h3 className = 'widget-header__title'>Your options</h3>\r\n\r\n      <button \r\n        className = 'button button--link'\r\n        onClick = {props.handleDeleteOptions}>Remove All\r\n      </button>\r\n\r\n    </div>\r\n\r\n    {props.options.length === 0 && <p className = 'widget__message'>Please add a option to start</p> }\r\n    {\r\n      props.options.map((option, index) => (\r\n        <Option\r\n          key={option}\r\n          optionText={option}\r\n          count = {index + 1}\r\n          handleDeleteOption = {props.handleDeleteOption}\r\n        />))\r\n    }\r\n\r\n    \r\n\r\n  </div>\r\n)\r\n\r\nexport default Options\r\n","import React from 'react'\r\n\r\nconst Action = (props) => (\r\n  <div>\r\n    <button\r\n      className = 'big-button'\r\n      disabled = {!props.hasOptions}\r\n      onClick = {props.handlePick}>What should I do?\r\n    </button>\r\n  </div>\r\n)\r\n\r\nexport default Action\r\n","import React from 'react'\r\nimport Modal from 'react-modal'\r\n\r\nconst OptionModal = (props) => (\r\n  <Modal\r\n    isOpen = {!!props.selectedOption}\r\n    contentLabel = \"Selected option\"\r\n    onRequestClose = {props.handleClearSelectedOption}\r\n    closeTimeoutMS = {200}\r\n    className = 'modal'\r\n  >\r\n    <h3 className = 'modal__title'>Selected option</h3>\r\n    {props.selectedOption && <p className = 'modal__body'>{props.selectedOption}</p>}\r\n    <button className = 'button' onClick = {props.clearSelectedOption}>Okay</button>\r\n  </Modal>\r\n)\r\n\r\nexport default OptionModal\r\n","import React from 'react'\r\n\r\nimport AddOption from './AddOption'\r\nimport Header from './Header'\r\nimport Options from './Options'\r\nimport Action from './Action'\r\nimport OptionModal from './OptionModal'\r\n\r\nexport default class IndecisionApp extends React.Component {\r\n\r\n//#region \r\n\r\nstate = {\r\n  options: this.props.options,\r\n  selectedOption: undefined\r\n}\r\n\r\n//#endregion\r\n\r\n  /* region lyfecycle methods */\r\n  componentDidMount () {\r\n    console.log('component did mount')\r\n    try {\r\n      const json = localStorage.getItem('options')\r\n      const options = JSON.parse(json)\r\n\r\n      if (options) {\r\n        this.setState(() => ({\r\n          options: options\r\n        }))\r\n      }\r\n    } catch (e) {\r\n      // error handling\r\n    }\r\n  }\r\n\r\n  componentDidUpdate (prevProps, prevState) {\r\n    console.log('component was updated')\r\n    if (prevState.options.length !== this.state.options.length) {\r\n      const json = JSON.stringify(this.state.options)\r\n      localStorage.setItem('options', json)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    console.log('component will unmount')\r\n    // is fired when the page will be switched by another page in the same app\r\n  }\r\n\r\n  /* #endregion lyfecycle methods */\r\n\r\n  /* #region Methods */\r\n  /* Option component methods */\r\n  handleDeleteOptions = () => {\r\n    // this.setState(() => {\r\n    //   return {\r\n    //     options: []\r\n    //   }\r\n    // })\r\n\r\n    // essa linha executa a mesma funcao de cima\r\n    this.setState(() => ({ options: [] }))\r\n  }\r\n\r\n  // deletes only one item\r\n  handleDeleteOption = (optionToRemove) => {\r\n    this.setState((prevState) => ({\r\n      options: prevState.options.filter((option) => {\r\n        return optionToRemove !== option\r\n      })\r\n    }))\r\n  }\r\n\r\n  /* Action component methods */\r\n  handlePick = () => {\r\n    const randomNum = Math.floor(Math.random() * this.state.options.length)\r\n    const option = this.state.options[randomNum]\r\n    this.setState (() => ({\r\n      selectedOption: option\r\n    }))\r\n  }\r\n\r\n  handleClearSelectedOption = () => {\r\n    this.setState (() => ({\r\n      selectedOption: undefined\r\n    }))\r\n  }\r\n\r\n  /* Add option component methods */\r\n  handleAddOption = (option) => {\r\n    if (!option) {\r\n      return 'Enter a valid value to add an option'\r\n    } else if (this.state.options.indexOf(option) > -1) {\r\n      return ('This option already exists')\r\n    } else {\r\n      // this.setState((prevState) => {\r\n      //   return {\r\n      //     options: prevState.options.concat([option])\r\n      //   }\r\n      // })\r\n\r\n      this.setState((prevState) => ({ options: prevState.options.concat([option]) }))\r\n    }\r\n  }\r\n\r\n  /* #endregion */\r\n\r\n  render () {\r\n    const subtitle = 'Put your life in the hands of a computer'\r\n\r\n    return (\r\n      <div>\r\n        <Header subtitle={subtitle}/>\r\n        \r\n        <div className = 'container'>\r\n          <Action\r\n          hasOptions = {this.state.options.length > 0}\r\n          options = {this.state.options}\r\n          handlePick = {this.handlePick}\r\n          />\r\n          \r\n          <div className = 'widget'>\r\n          <Options\r\n          options={this.state.options}\r\n          handleDeleteOptions = {this.handleDeleteOptions}\r\n          handleDeleteOption = {this.handleDeleteOption}\r\n          />\r\n          </div>\r\n          \r\n          <AddOption\r\n          handleAddOption = {this.handleAddOption}\r\n          />      \r\n        </div> \r\n          \r\n          <OptionModal\r\n          selectedOption = {this.state.selectedOption}\r\n          clearSelectedOption = {this.handleClearSelectedOption}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nIndecisionApp.defaultProps = {\r\n  options: []\r\n}\r\n\r\n","import React from 'react';\r\nimport 'normalize.css/normalize.css';\r\nimport './styles/styles.scss';\r\n\r\nimport IndecisionApp from './components/IndecisionApp';\r\n\r\nfunction App() {\r\n  return (\r\n    <IndecisionApp />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}